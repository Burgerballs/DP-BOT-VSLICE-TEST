import flixel.FlxG;

import funkin.Conductor;
import funkin.Paths;

import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.AtlasMenuItem;

import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.Module;

class CustomMenuOption extends Module
{
	public function new()
	{
		// Create a module with the ID 'custom-main-menu'
		super('custom-menu-option');
	}

	/**
	 * Event called after changing to a new state.
	 */
	public function onStateChangeEnd(event:StateChangeScriptEvent)
	{
		if (Std.isOfType(event.targetState, MainMenuState))
		{
			// We are moving into the main menu.
			trace("Setting up custom menu option");

			var menuItem = createMenuItem('important', 'mainmenu/important', event.targetState.menuItems.length,
			function() {
				trace('Transitioning to important menu');
				var currentState = FlxG.state;
				var targetState = ScriptedMusicBeatState.init('CustomState');
				currentState.startExitState(targetState);
			}, false);
			event.targetState.menuItems.addItem('important', menuItem);
			// Then we can make sure the menu items are centered.
			repositionMenuItems(event.targetState.menuItems);
		}
	}

	function createMenuItem(name:String, atlas:String, id:Int, callback:Void->Void, fireInstantly:Bool):Void
	{
		var item = new AtlasMenuItem(0, 0, name, Paths.getSparrowAtlas(atlas), callback);
		item.fireInstantly = fireInstantly;
		item.ID = id;

		item.scrollFactor.set(0, 1);

		// Set the offset of the item so the sprite is centered on the origin.
		item.centered = true;
		item.changeAnim('idle');

		return item;
	}

	/**
	 * Repositions the menu items.
	 * Copy-pasted from the original menu.
	 */
	function repositionMenuItems(menuItems:AtlasMenuList)
	{
		// Reset position of menu items.
		var spacing = 160;
		var top = (FlxG.height - (spacing * (menuItems.length - 1))) / 2;
		for (i in 0...menuItems.length)
		{
			var menuItem = menuItems.members[i];
			menuItem.x = FlxG.width / 2;
			menuItem.y = top + spacing * i;
		}
	}
}
